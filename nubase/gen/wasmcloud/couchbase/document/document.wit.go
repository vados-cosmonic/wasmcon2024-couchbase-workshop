// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package document represents the imported interface "wasmcloud:couchbase/document@0.1.0-draft".
//
// Support CRUD access and modification of Documents stored in a Couchbase cluster.
//
// Reference: https://docs.couchbase.com/c-sdk/current/concept-docs/documents.html
package document

import (
	"github.com/bytecodealliance/wasm-tools-go/cm"
	"github.com/vados-cosmonic/wasmcon2024-couchbase-workshop/nubase/gen/wasmcloud/couchbase/types"
)

// Document represents the imported type alias "wasmcloud:couchbase/document@0.1.0-draft#document".
//
// See [types.Document] for more information.
type Document = types.Document

// DocumentID represents the type alias "wasmcloud:couchbase/document@0.1.0-draft#document-id".
//
// See [types.DocumentID] for more information.
type DocumentID = types.DocumentID

// DocumentError represents the type alias "wasmcloud:couchbase/document@0.1.0-draft#document-error".
//
// See [types.DocumentError] for more information.
type DocumentError = types.DocumentError

// MutationMetadata represents the type alias "wasmcloud:couchbase/document@0.1.0-draft#mutation-metadata".
//
// See [types.MutationMetadata] for more information.
type MutationMetadata = types.MutationMetadata

// Time represents the type alias "wasmcloud:couchbase/document@0.1.0-draft#time".
//
// See [types.Time] for more information.
type Time = types.Time

// DurabilityLevel represents the type alias "wasmcloud:couchbase/document@0.1.0-draft#durability-level".
//
// See [types.DurabilityLevel] for more information.
type DurabilityLevel = types.DurabilityLevel

// RetryStrategy represents the type alias "wasmcloud:couchbase/document@0.1.0-draft#retry-strategy".
//
// See [types.RetryStrategy] for more information.
type RetryStrategy = types.RetryStrategy

// RequestSpan represents the type alias "wasmcloud:couchbase/document@0.1.0-draft#request-span".
//
// See [types.RequestSpan] for more information.
type RequestSpan = types.RequestSpan

// ReplicaReadLevel represents the type alias "wasmcloud:couchbase/document@0.1.0-draft#replica-read-level".
//
// See [types.ReplicaReadLevel] for more information.
type ReplicaReadLevel = types.ReplicaReadLevel

// DocumentInsertOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-insert-options".
//
// Document - Insert ///
//
// Options for performing a document insert
//
//	record document-insert-options {
//		expires-in-ns: u64,
//		persist-to: u64,
//		replicate-to: u64,
//		durability-level: durability-level,
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentInsertOptions struct {
	_ cm.HostLayout
	// When the document should expire (nanoseconds)
	ExpiresInNs uint64

	// (Deprecated)
	// Traditional durability settings for persistence, only usable from Couchbase versions
	// earlier than 6.0
	//
	// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
	PersistTo uint64

	// (Deprecated)
	// Traditional durability settings for replication, only usable from Couchbase versions
	// earlier than 6.0
	//
	// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
	ReplicateTo uint64

	// Durability level for the mutation
	//
	// (this should be used instead of persist-to/replicate-to)
	DurabilityLevel DurabilityLevel

	// Timeout that should be used, in nanoseconds
	// Even if a timeout is not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentReplaceOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-replace-options".
//
// Document - Replace ///
//
// Options for performing a document replace
//
//	record document-replace-options {
//		cas: u64,
//		expires-in-ns: u64,
//		preserve-expiry: bool,
//		persist-to: u64,
//		replicate-to: u64,
//		durability-level: durability-level,
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentReplaceOptions struct {
	_ cm.HostLayout
	// CAS revision of the document
	Cas uint64

	// When the document should expire (nanoseconds)
	ExpiresInNs uint64

	// Whether to preserve expiration values set on any documents modified by the query
	PreserveExpiry bool

	// (Deprecated)
	// Traditional durability settings for persistence, only usable from Couchbase versions
	// earlier than 6.0
	//
	// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
	PersistTo uint64

	// (Deprecated)
	// Traditional durability settings for replication, only usable from Couchbase versions
	// earlier than 6.0
	//
	// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
	ReplicateTo uint64

	// Durability level for the mutation
	//
	// (this should be used instead of persist-to/replicate-to)
	DurabilityLevel DurabilityLevel

	// Timeout that should be used, in nanoseconds
	// Even if a timeout is not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentUpsertOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-upsert-options".
//
// Document - Upsert ///
//
// Options for performing a document upsert
//
//	record document-upsert-options {
//		expires-in-ns: u64,
//		preserve-expiry: bool,
//		persist-to: u64,
//		replicate-to: u64,
//		durability-level: durability-level,
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentUpsertOptions struct {
	_ cm.HostLayout
	// When the document should expire (nanoseconds)
	ExpiresInNs uint64

	// Whether to preserve expiration values set on any documents modified by the query
	PreserveExpiry bool

	// (Deprecated)
	// Traditional durability settings for persistence, only usable from Couchbase versions
	// earlier than 6.0
	//
	// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
	PersistTo uint64

	// (Deprecated)
	// Traditional durability settings for replication, only usable from Couchbase versions
	// earlier than 6.0
	//
	// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
	ReplicateTo uint64

	// Durability level for the mutation
	//
	// (this should be used instead of persist-to/replicate-to)
	DurabilityLevel DurabilityLevel

	// Timeout that should be used, in nanoseconds
	// Even if a timeout is not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentGetOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-get-options".
//
// Document - Get ///
//
// Options for performing a document get
//
//	record document-get-options {
//		with-expiry: bool,
//		project: option<list<string>>,
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		use-replica: option<replica-read-level>,
//		parent-span: option<request-span>,
//	}
type DocumentGetOptions struct {
	_ cm.HostLayout
	// Whether expiry should also be retreived
	WithExpiry bool

	// Perform a projection of only specific paths of the result, returning only
	// the fields indicated by the given list of paths.
	Project cm.Option[cm.List[string]]

	// Timeout that should be used, in nanoseconds
	// If not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// Level of replica read to enable
	UseReplica cm.Option[ReplicaReadLevel]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentGetAnyReplicaOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-get-any-replica-options".
//
// Options for retrieving a document from any replica
//
//	record document-get-any-replica-options {
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentGetAnyReplicaOptions struct {
	_ cm.HostLayout
	// Timeout that should be used, in nanoseconds
	// If not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentGetAllReplicaOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-get-all-replica-options".
//
// Options for retrieving a document from any replica
//
//	record document-get-all-replica-options {
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentGetAllReplicaOptions struct {
	_ cm.HostLayout
	// Timeout that should be used, in nanoseconds
	// If not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentGetResult represents the imported record "wasmcloud:couchbase/document@0.1.0-draft#document-get-result".
//
// Result of a successfully executed document get
//
//	record document-get-result {
//		document: document,
//		cas: u64,
//		expires-in-ns: option<u64>,
//		expires-at: option<time>,
//	}
type DocumentGetResult struct {
	_ cm.HostLayout
	// Document that was retrieved
	Document Document

	// CAS revision of the document
	Cas uint64

	// When the document should expire (nanoseconds)
	//
	// Deprecated: use expires-at instead
	ExpiresInNs cm.Option[uint64]

	// Time when the document expires
	//
	// This field may not be present if `document-get-options.with-expiry` is not set
	ExpiresAt cm.Option[Time]
}

// DocumentGetReplicaResult represents the imported record "wasmcloud:couchbase/document@0.1.0-draft#document-get-replica-result".
//
// Result from a replica-aware document get
//
//	record document-get-replica-result {
//		is-replica: bool,
//		cas: u64,
//		document: document,
//		expires-in-ns: option<u64>,
//		expires-at: option<time>,
//	}
type DocumentGetReplicaResult struct {
	_ cm.HostLayout
	// Whether this document came from a replica server
	IsReplica bool

	// CAS revision of the document
	Cas uint64

	// Document that was retrieved
	Document Document

	// When the document should expire (nanoseconds)
	//
	// Deprecated: use expires-at instead
	ExpiresInNs cm.Option[uint64]

	// Time when the document expires
	//
	// This field may not be present if `document-get-options.with-expiry` is not set
	ExpiresAt cm.Option[Time]
}

// DocumentRemoveOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-remove-options".
//
// Document - Remove ///
//
// Options for performing a document remove
//
//	record document-remove-options {
//		cas: u64,
//		persist-to: u64,
//		replicate-to: u64,
//		durability-level: durability-level,
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentRemoveOptions struct {
	_ cm.HostLayout
	// CAS revision of the document
	Cas uint64

	// (Deprecated)
	// Traditional durability settings for persistence, only usable from Couchbase versions
	// earlier than 6.0
	//
	// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
	PersistTo uint64

	// (Deprecated)
	// Traditional durability settings for replication, only usable from Couchbase versions
	// earlier than 6.0
	//
	// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
	ReplicateTo uint64

	// Durability level for the mutation
	//
	// (this should be used instead of persist-to/replicate-to)
	DurabilityLevel DurabilityLevel

	// Timeout that should be used, in nanoseconds
	// Even if a timeout is not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentGetAndLockOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-get-and-lock-options".
//
// Document - Get and Lock ///
//
// Options for performing a document lock
//
//	record document-get-and-lock-options {
//		lock-time: u64,
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentGetAndLockOptions struct {
	_ cm.HostLayout
	// Amount of time to lock the document (nanoseconds)
	LockTime uint64

	// Timeout that should be used, in nanoseconds
	// Even if a timeout is not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentUnlockOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-unlock-options".
//
// Document - Unlock ///
//
// Options for performing a document lock
//
//	record document-unlock-options {
//		cas: u64,
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentUnlockOptions struct {
	_ cm.HostLayout
	// CAS revision of the document
	Cas uint64

	// Timeout that should be used, in nanoseconds
	// Even if a timeout is not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentTouchOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-touch-options".
//
// Document - Touch ///
//
// Options for performing a document lock
//
//	record document-touch-options {
//		expires-in: u64,
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentTouchOptions struct {
	_ cm.HostLayout
	// Time until the document expires (nanoseconds)
	ExpiresIn uint64

	// Timeout that should be used, in nanoseconds
	// Even if a timeout is not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// DocumentGetAndTouchOptions represents the record "wasmcloud:couchbase/document@0.1.0-draft#document-get-and-touch-options".
//
// Document - Get and Touch ///
//
// Options for performing a document touch
//
//	record document-get-and-touch-options {
//		expires-in: u64,
//		timeout-ns: option<u64>,
//		retry-strategy: option<retry-strategy>,
//		parent-span: option<request-span>,
//	}
type DocumentGetAndTouchOptions struct {
	_ cm.HostLayout
	// Time until the document expires (nanoseconds)
	ExpiresIn uint64

	// Timeout that should be used, in nanoseconds
	// Even if a timeout is not specified, the implementer *may* provide a default timeout.
	TimeoutNs cm.Option[uint64]

	// How and whether to retry the operation
	RetryStrategy cm.Option[RetryStrategy]

	// A known span to associate this lookup with
	ParentSpan cm.Option[RequestSpan]
}

// Insert represents the imported function "insert".
//
// Insert a document with a new ID
//
//	insert: func(id: document-id, doc: document, options: option<document-insert-options>)
//	-> result<mutation-metadata, document-error>
//
//go:nosplit
func Insert(id DocumentID, doc Document, options cm.Option[DocumentInsertOptions]) (result cm.Result[MutationMetadataShape, MutationMetadata, DocumentError]) {
	params := wasmimport_Insert_params{id: id, doc: doc, options: options}
	wasmimport_Insert(&params, &result)
	return
}

// wasmimport_Insert_params represents the flattened function params for [wasmimport_Insert].
// See the Canonical ABI flattening rules for more information.
type wasmimport_Insert_params struct {
	_       cm.HostLayout
	id      DocumentID
	doc     Document
	options cm.Option[DocumentInsertOptions]
}

// Replace represents the imported function "replace".
//
// Replace a document with the given ID with a new document
//
//	replace: func(id: document-id, doc: document, options: option<document-replace-options>)
//	-> result<mutation-metadata, document-error>
//
//go:nosplit
func Replace(id DocumentID, doc Document, options cm.Option[DocumentReplaceOptions]) (result cm.Result[MutationMetadataShape, MutationMetadata, DocumentError]) {
	params := wasmimport_Replace_params{id: id, doc: doc, options: options}
	wasmimport_Replace(&params, &result)
	return
}

// wasmimport_Replace_params represents the flattened function params for [wasmimport_Replace].
// See the Canonical ABI flattening rules for more information.
type wasmimport_Replace_params struct {
	_       cm.HostLayout
	id      DocumentID
	doc     Document
	options cm.Option[DocumentReplaceOptions]
}

// Upsert represents the imported function "upsert".
//
// Create or update (replace) an existing document with the given ID
//
//	upsert: func(id: document-id, doc: document, options: option<document-upsert-options>)
//	-> result<mutation-metadata, document-error>
//
//go:nosplit
func Upsert(id DocumentID, doc Document, options cm.Option[DocumentUpsertOptions]) (result cm.Result[MutationMetadataShape, MutationMetadata, DocumentError]) {
	params := wasmimport_Upsert_params{id: id, doc: doc, options: options}
	wasmimport_Upsert(&params, &result)
	return
}

// wasmimport_Upsert_params represents the flattened function params for [wasmimport_Upsert].
// See the Canonical ABI flattening rules for more information.
type wasmimport_Upsert_params struct {
	_       cm.HostLayout
	id      DocumentID
	doc     Document
	options cm.Option[DocumentUpsertOptions]
}

// Get represents the imported function "get".
//
// Retrieve a document by ID
//
//	get: func(id: document-id, options: option<document-get-options>) -> result<document-get-result,
//	document-error>
//
//go:nosplit
func Get(id DocumentID, options cm.Option[DocumentGetOptions]) (result cm.Result[DocumentGetResultShape, DocumentGetResult, DocumentError]) {
	params := wasmimport_Get_params{id: id, options: options}
	wasmimport_Get(&params, &result)
	return
}

// wasmimport_Get_params represents the flattened function params for [wasmimport_Get].
// See the Canonical ABI flattening rules for more information.
type wasmimport_Get_params struct {
	_       cm.HostLayout
	id      DocumentID
	options cm.Option[DocumentGetOptions]
}

// GetAnyReplicas represents the imported function "get-any-replicas".
//
// Retrieve a document by ID from any replica
//
//	get-any-replicas: func(id: document-id, options: option<document-get-any-replica-options>)
//	-> result<document-get-replica-result, document-error>
//
//go:nosplit
func GetAnyReplicas(id DocumentID, options cm.Option[DocumentGetAnyReplicaOptions]) (result cm.Result[DocumentGetReplicaResultShape, DocumentGetReplicaResult, DocumentError]) {
	id0, id1 := cm.LowerString(id)
	options0, options1, options2, options3, options4, options5, options6, options7, options8, options9 := lower_OptionDocumentGetAnyReplicaOptions(options)
	wasmimport_GetAnyReplicas((*uint8)(id0), (uint32)(id1), (uint32)(options0), (uint32)(options1), (uint64)(options2), (uint32)(options3), (uint32)(options4), (uint64)(options5), (uint64)(options6), (uint32)(options7), (*uint8)(options8), (uint32)(options9), &result)
	return
}

// GetAllReplicas represents the imported function "get-all-replicas".
//
// Retrieve a document by ID from all replicas
//
//	get-all-replicas: func(id: document-id, options: option<document-get-all-replica-options>)
//	-> result<list<document-get-replica-result>, document-error>
//
//go:nosplit
func GetAllReplicas(id DocumentID, options cm.Option[DocumentGetAllReplicaOptions]) (result cm.Result[cm.List[DocumentGetReplicaResult], cm.List[DocumentGetReplicaResult], DocumentError]) {
	id0, id1 := cm.LowerString(id)
	options0, options1, options2, options3, options4, options5, options6, options7, options8, options9 := lower_OptionDocumentGetAllReplicaOptions(options)
	wasmimport_GetAllReplicas((*uint8)(id0), (uint32)(id1), (uint32)(options0), (uint32)(options1), (uint64)(options2), (uint32)(options3), (uint32)(options4), (uint64)(options5), (uint64)(options6), (uint32)(options7), (*uint8)(options8), (uint32)(options9), &result)
	return
}

// Remove represents the imported function "remove".
//
// Remove a document by ID
//
//	remove: func(id: document-id, options: option<document-remove-options>) -> result<mutation-metadata,
//	document-error>
//
//go:nosplit
func Remove(id DocumentID, options cm.Option[DocumentRemoveOptions]) (result cm.Result[MutationMetadataShape, MutationMetadata, DocumentError]) {
	id0, id1 := cm.LowerString(id)
	options0, options1, options2, options3, options4, options5, options6, options7, options8, options9, options10, options11, options12, options13 := lower_OptionDocumentRemoveOptions(options)
	wasmimport_Remove((*uint8)(id0), (uint32)(id1), (uint32)(options0), (uint64)(options1), (uint64)(options2), (uint64)(options3), (uint32)(options4), (uint32)(options5), (uint64)(options6), (uint32)(options7), (uint32)(options8), (uint64)(options9), (uint64)(options10), (uint32)(options11), (*uint8)(options12), (uint32)(options13), &result)
	return
}

// GetAndLock represents the imported function "get-and-lock".
//
// Retrieve and Lock a document by ID
//
//	get-and-lock: func(id: document-id, options: option<document-get-and-lock-options>)
//	-> result<document-get-result, document-error>
//
//go:nosplit
func GetAndLock(id DocumentID, options cm.Option[DocumentGetAndLockOptions]) (result cm.Result[DocumentGetResultShape, DocumentGetResult, DocumentError]) {
	id0, id1 := cm.LowerString(id)
	options0, options1, options2, options3, options4, options5, options6, options7, options8, options9, options10 := lower_OptionDocumentGetAndLockOptions(options)
	wasmimport_GetAndLock((*uint8)(id0), (uint32)(id1), (uint32)(options0), (uint64)(options1), (uint32)(options2), (uint64)(options3), (uint32)(options4), (uint32)(options5), (uint64)(options6), (uint64)(options7), (uint32)(options8), (*uint8)(options9), (uint32)(options10), &result)
	return
}

// Unlock represents the imported function "unlock".
//
// Retrieve and Lock a document by ID
//
//	unlock: func(id: document-id, options: option<document-unlock-options>) -> result<_,
//	document-error>
//
//go:nosplit
func Unlock(id DocumentID, options cm.Option[DocumentUnlockOptions]) (result cm.Result[DocumentError, struct{}, DocumentError]) {
	id0, id1 := cm.LowerString(id)
	options0, options1, options2, options3, options4, options5, options6, options7, options8, options9, options10 := lower_OptionDocumentUnlockOptions(options)
	wasmimport_Unlock((*uint8)(id0), (uint32)(id1), (uint32)(options0), (uint64)(options1), (uint32)(options2), (uint64)(options3), (uint32)(options4), (uint32)(options5), (uint64)(options6), (uint64)(options7), (uint32)(options8), (*uint8)(options9), (uint32)(options10), &result)
	return
}

// Touch represents the imported function "touch".
//
// Retrieve and Lock a document by ID
//
//	touch: func(id: document-id, options: option<document-touch-options>) -> result<mutation-metadata,
//	document-error>
//
//go:nosplit
func Touch(id DocumentID, options cm.Option[DocumentTouchOptions]) (result cm.Result[MutationMetadataShape, MutationMetadata, DocumentError]) {
	id0, id1 := cm.LowerString(id)
	options0, options1, options2, options3, options4, options5, options6, options7, options8, options9, options10 := lower_OptionDocumentTouchOptions(options)
	wasmimport_Touch((*uint8)(id0), (uint32)(id1), (uint32)(options0), (uint64)(options1), (uint32)(options2), (uint64)(options3), (uint32)(options4), (uint32)(options5), (uint64)(options6), (uint64)(options7), (uint32)(options8), (*uint8)(options9), (uint32)(options10), &result)
	return
}

// GetAndTouch represents the imported function "get-and-touch".
//
// Retrieve and Touch a document by ID
//
//	get-and-touch: func(id: document-id, options: option<document-get-and-touch-options>)
//	-> result<document-get-result, document-error>
//
//go:nosplit
func GetAndTouch(id DocumentID, options cm.Option[DocumentGetAndTouchOptions]) (result cm.Result[DocumentGetResultShape, DocumentGetResult, DocumentError]) {
	id0, id1 := cm.LowerString(id)
	options0, options1, options2, options3, options4, options5, options6, options7, options8, options9, options10 := lower_OptionDocumentGetAndTouchOptions(options)
	wasmimport_GetAndTouch((*uint8)(id0), (uint32)(id1), (uint32)(options0), (uint64)(options1), (uint32)(options2), (uint64)(options3), (uint32)(options4), (uint32)(options5), (uint64)(options6), (uint64)(options7), (uint32)(options8), (*uint8)(options9), (uint32)(options10), &result)
	return
}
